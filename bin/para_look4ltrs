#!/usr/bin/perl

use strict;
use warnings;
use Cwd;

my $fasta_file = $ARGV[0];
unless ($fasta_file) {
    die "Usage: $0 <fasta_file>\n";
}

my $i=0;
chdir $ARGV[2];
chdir "look4ltrs"; 

open(my $fh, '<', "$fasta_file") or die "Cannot open file $fasta_file: $!";

my $out_fh; 
my $length = 0;
while (my $line = <$fh>) {
    chomp $line;
	
    if ($line =~ /^>(\S+)/) {
        my $chromosome = $1;

        close($out_fh) if $out_fh;
		$i++;
        mkdir "chr$i" unless -e "chr$i";
        open($out_fh, '>>', "chr$i/chr$i.fasta") or die "Cannot open file $chromosome.fasta: $!";
        print $out_fh "$line\n";
    } else {
		#$length += length($line);
		#if($length > 20000000){
			#$i++;
		#	$length = 0;
		#}
        print $out_fh "$line\n";
    }
}

close($fh);
close($out_fh) if $out_fh;

open(COMD,">command.list") or die "Cannot open file command.list: $!";

my $current_dir = getcwd();

my $threads;
my $cmdString;

if($i>$ARGV[1]){
	$threads = 1;
	$cmdString="ParaFly -c command.list -CPU $ARGV[1] > look4ltr.err 2> look4ltr.log";
}else{
	$threads = int($ARGV[1]/$i);
	$cmdString="ParaFly -c command.list -CPU $i > look4ltr.err 2> look4ltr.log";
}

for(my $j = 1;$j<=$i;$j++){
	my $timeout = 3 * 60 * 60;
	$fasta_file =~ s/\/genome.fa//;
	print COMD "timeout $timeout look4ltrs -t $fasta_file --fasta $current_dir/chr$j --out $current_dir/chr$j --parallel $threads >> ltr.stat\n";
}
unless ( -e "raw.fa"){
   system("$cmdString") ;
for(my $j = 1;$j<=$i;$j++){
	`cat $current_dir/chr$j/Rtr/*.rtr | grep -v "RightEnd" >> $current_dir/genome.rtr`;
}
open(IN,"$current_dir/genome.rtr");
open(OUT,">$current_dir/genome.bed");

while(<IN>){
	chomp;
	my @arr=split(/\t/);
	if($arr[15]>0.9){
		if($arr[5] eq "NA"){
			print OUT $arr[0]."\t".$arr[2]."\t".$arr[3]."\n";
		}elsif($arr[2] eq "NA"){print OUT $arr[0]."\t".$arr[4]."\t".$arr[5]."\n";}
		else{print OUT $arr[0]."\t".$arr[2]."\t".$arr[5]."\n";}
	}
}
	`sort -k1,1 -k2,2n $current_dir/genome.bed > $current_dir/genome.sorted.bed`;
	`clean_list $current_dir/genome.sorted.bed $current_dir/genome.cleaned.bed`;
	`seqtk subseq $fasta_file/genome.fa $current_dir/genome.cleaned.bed > $current_dir/LTR.fa`;
}

`filter-stage-1.prl LTR.fa > LTR.fa.filter 2>> look4ltr.log`;
$cmdString="Refiner_for_LTR LTR.fa.filter ./ --threads $ARGV[1] > refine.log 2> refine.err";
system("$cmdString") == 0 or die "failed to execute: $cmdString\n";
