#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path getcwd);
use File::Basename qw(dirname basename);
use File::Path qw(make_path);

# Constants
use constant {
    MIN_LENGTH_FOR_SPLIT => 50_000_000,  # 50MB threshold
};

my $fasta_file = abs_path($ARGV[0]);
unless ($fasta_file && -e $fasta_file) {
    die "Usage: $0 <fasta_file> <threads> <out_dir>\n";
}

my $out_dir = abs_path($ARGV[2]);
make_path($out_dir) unless -d $out_dir;
chdir $out_dir or die "Cannot change to directory $out_dir: $!\n";
make_path("look4ltrs") unless -d "look4ltrs";
chdir "look4ltrs" or die "Cannot change to look4ltrs directory: $!\n";

# Data structures to store sequences
my @large_seqs;     # Sequences > 50MB
my @small_seqs;     # Sequences < 50MB
my $current_group = {
    seqs => [],
    size => 0
};

# Read and categorize sequences
open(my $fh, '<', $fasta_file) or die "Cannot open file $fasta_file: $!\n";
my $current_seq = '';
my $current_header = '';
my $seq_count = 0;

while (my $line = <$fh>) {
    chomp $line;
    if ($line =~ /^>(.+)/) {
        # Process previous sequence if exists
        if ($current_seq) {
            process_sequence($current_header, $current_seq);
        }
        $current_header = $1;
        $current_seq = '';
    } else {
        $current_seq .= $line;
    }
}
# Process the last sequence
if ($current_seq) {
    process_sequence($current_header, $current_seq);
}
close($fh);

# If there are remaining small sequences, add them to the last group
if (@{$current_group->{seqs}} > 0) {
    finalize_current_group();
}

# Write command list
my $group_count = @large_seqs + int(@small_seqs / 2) + 1;
my $threads = $ARGV[1];
my $threads_per_group;

if ($group_count > $threads) {
    $threads_per_group = 1;
} else {
    $threads_per_group = int($threads / $group_count);
    $threads_per_group = 1 if $threads_per_group < 1;
}

open(COMD, ">command.list") or die "Cannot open command.list: $!\n";

# Write commands for both large and small sequence groups
my $current_dir = getcwd();
my $base_dir = dirname($fasta_file);
my $group_index = 1;

# Process large sequences
foreach my $large_seq (@large_seqs) {
    write_fasta_file($group_index, [$large_seq]);
    write_command($group_index, $base_dir, $threads_per_group);
    $group_index++;
}

# Process small sequence groups
foreach my $small_group (@small_seqs) {
    write_fasta_file($group_index, $small_group);
    write_command($group_index, $base_dir, $threads_per_group);
    $group_index++;
}

close(COMD);

my $cmdString;
if($group_count > $ARGV[1]) {
    $cmdString = "ParaFly -c command.list -CPU $ARGV[1] > look4ltr.err 2> look4ltr.log";
} else {
    $cmdString = "ParaFly -c command.list -CPU $group_count > look4ltr.err 2> look4ltr.log";
}

if (! -e "$current_dir/LTR.fa") {
    system($cmdString) == 0 or die "Failed to execute: $cmdString\n";
    
    for(my $j = 1; $j < $group_index; $j++) {
        my $current_dir = abs_path(".");
        system("cat $current_dir/group$j/Rtr/*.rtr | grep -v 'RightEnd' >> $current_dir/genome.rtr") == 0
            or die "Failed to concatenate RTR files for group$j\n";
    }

    open(IN, "$current_dir/genome.rtr") or die "Cannot open genome.rtr: $!";
    open(OUT, ">$current_dir/genome.bed") or die "Cannot open genome.bed: $!";

    while(<IN>) {
        chomp;
        my @arr = split(/\t/);
        if($arr[15] eq "NA"){next;}
        if($arr[15] > 0.9) {
            if($arr[5] eq "NA") {
                print OUT $arr[0]."\t".$arr[2]."\t".$arr[3]."\n";
            } elsif($arr[2] eq "NA") {
                print OUT $arr[0]."\t".$arr[4]."\t".$arr[5]."\n";
            } else {
                print OUT $arr[0]."\t".$arr[2]."\t".$arr[5]."\n";
            }
        }
    }
    close(IN);
    close(OUT);

    system("sort -k1,1 -k2,2n $current_dir/genome.bed > $current_dir/genome.sorted.bed") == 0
        or die "Failed to sort genome.bed\n";
    system("clean_list $current_dir/genome.sorted.bed $current_dir/genome.cleaned.bed") == 0
        or die "Failed to clean genome.bed\n";
    system("seqtk subseq $fasta_file $current_dir/genome.cleaned.bed > $current_dir/tmp.fa") == 0
        or die "Failed to extract LTR sequences\n";
    system("sed 's:N::g' $current_dir/tmp.fa > $current_dir/LTR.fa") == 0
        or die "Failed to extract LTR sequences\n";
}

system("filter-stage-1.prl LTR.fa > LTR.fa.filter 2>> look4ltr.log") == 0
    or die "Failed to filter LTR sequences\n";

$cmdString = "Refiner_for_LTR LTR.fa.filter ./ --threads $ARGV[1] > refine.log 2> refine.err";
system($cmdString) == 0 or die "Failed to execute: $cmdString\n";

$cmdString = "LTR_Boundary_Optimizer.py consensi.fa ../genome/genome.fa output_dir --threads 32 --advanced-tsd --weighted-evidence --kmer-boundary --orientation-aware --low-complexity-filter --clustering --dynamic-threshold --orf-analysis";
system($cmdString) == 0 or die "Failed to execute: $cmdString\n";

`cp output_dir/optimized_consensus.fa consensi.fa`;

sub process_sequence {
    my ($header, $seq) = @_;
    my $length = length($seq);
    
    if ($length >= MIN_LENGTH_FOR_SPLIT) {
        # Store large sequences separately
        push @large_seqs, {
            header => $header,
            seq => $seq,
            length => $length
        };
    } else {
        # Add to current group of small sequences
        if ($current_group->{size} + $length >= MIN_LENGTH_FOR_SPLIT) {
            # Current group would exceed 20MB, finalize it
            finalize_current_group();
        }
        
        push @{$current_group->{seqs}}, {
            header => $header,
            seq => $seq,
            length => $length
        };
        $current_group->{size} += $length;
    }
}

sub finalize_current_group {
    if (@{$current_group->{seqs}} > 0) {
        push @small_seqs, $current_group->{seqs};
        $current_group = {
            seqs => [],
            size => 0
        };
    }
}

sub write_fasta_file {
    my ($group_num, $sequences) = @_;
    
    make_path("group$group_num") unless -e "group$group_num";
    open(my $out_fh, '>', "group$group_num/group$group_num.fasta") 
        or die "Cannot open group$group_num.fasta: $!\n";
    
    foreach my $seq (@$sequences) {
        print $out_fh ">$seq->{header}\n";
        print $out_fh "$seq->{seq}\n";
    }
    close($out_fh);
}

sub write_command {
    my ($group_num, $base_dir, $threads_per_group) = @_;
    my $timeout = 3 * 60 * 60;  # 3 hour timeout
    my $current_dir = abs_path(".");
    
    print COMD "timeout $timeout look4ltrs -t $base_dir --fasta $current_dir/group$group_num " .
               "--out $current_dir/group$group_num --parallel $threads_per_group >> ltr.stat\n";
}
