#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path getcwd);  # Add getcwd to the import
use File::Basename qw(dirname basename);
use File::Path qw(make_path);  # Add make_path for directory creation

my $fasta_file = abs_path($ARGV[0]);  # Convert to absolute path
unless ($fasta_file && -e $fasta_file) {
    die "Usage: $0 <fasta_file> <threads> <out_dir>\n";
}

my $i = 0;
my $out_dir = abs_path($ARGV[2]);
make_path($out_dir) unless -d $out_dir;  # Create output directory if it doesn't exist
chdir $out_dir or die "Cannot change to directory $out_dir: $!\n";
make_path("look4ltrs") unless -d "look4ltrs";
chdir "look4ltrs" or die "Cannot change to look4ltrs directory: $!\n"; 

open(my $fh, '<', $fasta_file) or die "Cannot open file $fasta_file: $!\n";

my $out_fh; 
my $length = 0;
while (my $line = <$fh>) {
    chomp $line;
    
    if ($line =~ /^>(\S+)/) {
        my $chromosome = $1;

        close($out_fh) if $out_fh;
        $i++;
        make_path("chr$i") unless -e "chr$i";
        open($out_fh, '>>', "chr$i/chr$i.fasta") or die "Cannot open file chr$i.fasta: $!";
        print $out_fh "$line\n";
    } else {
        print $out_fh "$line\n";
    }
}

close($fh);
close($out_fh) if $out_fh;

open(COMD,">command.list") or die "Cannot open file command.list: $!";

my $current_dir = getcwd();  # Now getcwd is properly imported

my $threads;
my $cmdString;

if($i > $ARGV[1]) {
    $threads = 1;
    $cmdString = "ParaFly -c command.list -CPU $ARGV[1] > look4ltr.err 2> look4ltr.log";
} else {
    $threads = int($ARGV[1]/$i);
    $cmdString = "ParaFly -c command.list -CPU $i > look4ltr.err 2> look4ltr.log";
}

my $base_dir = dirname($fasta_file);

for(my $j = 1; $j <= $i; $j++) {
    my $timeout = 3 * 60 * 60;  # 3 hour timeout
    my $current_dir = abs_path(".");
    print COMD "timeout $timeout look4ltrs -t $base_dir --fasta $current_dir/chr$j " .
               "--out $current_dir/chr$j --parallel $threads >> ltr.stat\n";
}

close(COMD);

if (! -e "raw.fa") {
    system($cmdString) == 0 or die "Failed to execute: $cmdString\n";
    
    for(my $j = 1; $j <= $i; $j++) {
        my $current_dir = abs_path(".");
        system("cat $current_dir/chr$j/Rtr/*.rtr | grep -v 'RightEnd' >> $current_dir/genome.rtr") == 0
            or die "Failed to concatenate RTR files for chr$j\n";
    }

    open(IN, "$current_dir/genome.rtr") or die "Cannot open genome.rtr: $!";
    open(OUT, ">$current_dir/genome.bed") or die "Cannot open genome.bed: $!";

    while(<IN>) {
        chomp;
        my @arr = split(/\t/);
        if($arr[15] eq NA){next;}
        if($arr[15] > 0.9) {
            if($arr[5] eq "NA") {
                print OUT $arr[0]."\t".$arr[2]."\t".$arr[3]."\n";
            } elsif($arr[2] eq "NA") {
                print OUT $arr[0]."\t".$arr[4]."\t".$arr[5]."\n";
            } else {
                print OUT $arr[0]."\t".$arr[2]."\t".$arr[5]."\n";
            }
        }
    }
    close(IN);
    close(OUT);

    system("sort -k1,1 -k2,2n $current_dir/genome.bed > $current_dir/genome.sorted.bed") == 0
        or die "Failed to sort genome.bed\n";
    system("clean_list $current_dir/genome.sorted.bed $current_dir/genome.cleaned.bed") == 0
        or die "Failed to clean genome.bed\n";
    system("seqtk subseq $fasta_file $current_dir/genome.cleaned.bed > $current_dir/LTR.fa") == 0
        or die "Failed to extract LTR sequences\n";
}

system("filter-stage-1.prl LTR.fa > LTR.fa.filter 2>> look4ltr.log") == 0
    or die "Failed to filter LTR sequences\n";

$cmdString = "Refiner_for_LTR LTR.fa.filter ./ --threads $ARGV[1] > refine.log 2> refine.err";
system($cmdString) == 0 or die "Failed to execute: $cmdString\n";
