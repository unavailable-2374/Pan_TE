#!/usr/bin/env perl
use strict;
use warnings;
use Cwd;
use File::Path qw(make_path remove_tree);
use Parallel::ForkManager;
use File::Basename;
use Log::Log4perl qw(:easy);
use Time::HiRes qw(time);
use POSIX qw(strftime);

# Initialize logging with timestamp
Log::Log4perl->easy_init({
    level   => $INFO,
    layout  => '[%d] %p %m%n',
    file    => '>>' . getcwd() . '/process_ltr_huge.log'
});
my $logger = Log::Log4perl->get_logger();

die "Usage: $0 <genome_file> <threads> <output_dir>\n" unless @ARGV == 3;
my ($genome_file, $threads, $out_dir) = @ARGV;

# Convert to absolute paths
$genome_file = Cwd::abs_path($genome_file);
$out_dir = Cwd::abs_path($out_dir);

$logger->info("Starting LTR processing for large genome");
$logger->info("Parameters:");
$logger->info("  Genome file: $genome_file");
$logger->info("  Threads: $threads");
$logger->info("  Output directory: $out_dir");

# Create output directory structure
make_path($out_dir) unless -e $out_dir;
chdir $out_dir or die "Cannot change to directory $out_dir: $!\n";
my $ltr_dir = "look4ltrs";
make_path($ltr_dir) unless -e $ltr_dir;

# Get chromosome information
$logger->info("Reading genome index");
my $chromosomes = get_chromosome_info($genome_file);
my $total_chroms = scalar @$chromosomes;
$logger->info("Found $total_chroms chromosomes");

# Calculate threads per chromosome
my $threads_per_chr = int($threads / $total_chroms);
$threads_per_chr = 1 if $threads_per_chr < 1;
$logger->info("Allocating $threads_per_chr thread(s) per chromosome");

# Create process manager for chromosome-level parallelization
my $chr_pm = Parallel::ForkManager->new($total_chroms);

# Setup completion tracking
my %completed = ();
$chr_pm->run_on_finish(sub {
    my ($pid, $exit_code, $ident) = @_;
    if ($exit_code == 0) {
        $completed{$ident} = 1;
        my $progress = scalar(keys %completed);
        $logger->info("Completed chromosome $ident ($progress/$total_chroms)");
    } else {
        $logger->error("Processing failed for chromosome $ident (pid: $pid)");
    }
});

# Process each chromosome
$logger->info("Starting chromosome processing");
foreach my $chr (@$chromosomes) {
    $chr_pm->start($chr->{name}) and next;
    
    eval {
        process_chromosome($chr, $genome_file, $threads_per_chr, $ltr_dir);
        $chr_pm->finish(0);
    };
    if ($@) {
        $logger->error("Error processing chromosome $chr->{name}: $@");
        $chr_pm->finish(1);
    }
}

$chr_pm->wait_all_children;

# Verify all chromosomes completed
my $success = scalar(keys %completed) == $total_chroms;
if ($success) {
    $logger->info("All chromosomes processed successfully");
    # Combine all results
    combine_results($ltr_dir);
    $logger->info("LTR processing completed successfully");
} else {
    $logger->error("Some chromosomes failed to process");
    die "LTR processing failed\n";
}

sub get_chromosome_info {
    my ($genome_file) = @_;
    my @chromosomes;
    
    open my $fai, '<', "$genome_file.fai" or die "Cannot open genome index file: $!";
    while (<$fai>) {
        chomp;
        my ($name, $length) = split /\t/;
        my $readable_len = sprintf("%.2f", $length/1e6) . " Mb";
        push @chromosomes, {
            name => $name,
            length => $length
        };
        $logger->debug("Found chromosome $name ($readable_len)");
    }
    close $fai;
    
    return \@chromosomes;
}

sub process_chromosome {
    my ($chr, $genome_file, $threads, $ltr_dir) = @_;
    
    my $start_time = time;
    $logger->info("Starting processing of $chr->{name}");
    
    my $chr_dir = "$ltr_dir/$chr->{name}";
    make_path($chr_dir);
    
    # Calculate chunk size
    my $chunk_size = int($chr->{length} / $threads);
    my $readable_chunk = sprintf("%.2f", $chunk_size/1e6) . " Mb";
    $logger->info("Processing $chr->{name} in chunks of $readable_chunk");
    
    # Create process manager for chunk-level parallelization
    my $chunk_pm = Parallel::ForkManager->new($threads);
    
    my %chunk_status;
    $chunk_pm->run_on_finish(sub {
        my ($pid, $exit_code, $chunk_id) = @_;
        $chunk_status{$chunk_id} = $exit_code == 0;
    });
    
    # Process chromosome in chunks
    for my $i (0..$threads-1) {
        $chunk_pm->start($i) and next;
        
        my $chunk_start = $i * $chunk_size + 1;
        my $chunk_end = ($i == $threads-1) ? $chr->{length} : ($i + 1) * $chunk_size;
        
        my $chunk_dir = "$chr_dir/chunk_$i";
        make_path($chunk_dir);
        
        eval {
            process_chunk($chr, $chunk_dir, $genome_file, $chunk_start, $chunk_end, $i);
            $chunk_pm->finish(0);
        };
        if ($@) {
            $logger->error("Error processing chunk $i: $@");
            $chunk_pm->finish(1);
        }
    }
    
    $chunk_pm->wait_all_children;
    
    # Check if all chunks completed successfully
    my $all_chunks_ok = 1;
    for my $i (0..$threads-1) {
        unless ($chunk_status{$i}) {
            $logger->error("Chunk $i of chromosome $chr->{name} failed");
            $all_chunks_ok = 0;
        }
    }
    
    if ($all_chunks_ok) {
        # Combine chunks for this chromosome
        $logger->info("Combining chunks for chromosome $chr->{name}");
        system("cat $chr_dir/chunk_*/consensi.fa > $chr_dir/consensi.fa") == 0
            or die "Failed to combine chunk results\n";
            
        # Clean up
        $logger->info("Cleaning up temporary chunk directories");
        remove_tree("$chr_dir/chunk_$_") for 0..$threads-1;
        
        my $duration = time - $start_time;
        $logger->info(sprintf("Completed chromosome %s in %.2f minutes", 
                            $chr->{name}, $duration/60));
    } else {
        die "Failed to process all chunks for chromosome $chr->{name}\n";
    }
}

sub process_chunk {
    my ($chr, $chunk_dir, $genome_file, $chunk_start, $chunk_end, $chunk_id) = @_;
    
    my $chunk_size = $chunk_end - $chunk_start + 1;
    my $readable_size = sprintf("%.2f", $chunk_size/1e6) . " Mb";
    $logger->info("Processing chunk $chunk_id of $chr->{name} ($readable_size)");
    
    # Extract sequence
    my $cmd = "samtools faidx $genome_file $chr->{name}:$chunk_start-$chunk_end > $chunk_dir/chunk.fa";
    system($cmd) == 0 or die "Failed to extract sequence: $!\n";
    
    # Process with look4ltrs
    $cmd = "look4ltrs -t $chunk_dir --fasta $chunk_dir/chunk.fa --out $chunk_dir --parallel 1";
    system($cmd) == 0 or die "Failed to process chunk with look4ltrs: $!\n";
    
    $logger->info("Completed chunk $chunk_id of $chr->{name}");
}

sub combine_results {
    my ($ltr_dir) = @_;
    
    $logger->info("Combining results from all chromosomes");
    
    # Combine all chromosome results
    system("cat $ltr_dir/*/consensi.fa > $ltr_dir/all_consensi.fa") == 0
        or die "Failed to combine chromosome results\n";
        
    # Final clustering
    $logger->info("Performing final clustering of results");
    system("cd-hit-est -i $ltr_dir/all_consensi.fa -o $ltr_dir/consensi.fa " .
           "-c 0.8 -n 5 -T 8 -M 0 -d 0") == 0
        or die "Failed to cluster final results\n";
        
    # Clean up
    unlink "$ltr_dir/all_consensi.fa";
    $logger->info("Cleaning up chromosome directories");
    remove_tree("$ltr_dir/$_->{name}") for @$chromosomes;
    
    $logger->info("Results successfully combined and clustered");
}