#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib $FindBin::RealBin;
use File::Path qw(make_path);
use File::Spec;
use File::Basename qw(dirname);
use Cwd qw(abs_path);
use Parallel::ForkManager;

# Import essential RepeatMasker modules
use RepModelConfig;
use lib $RepModelConfig::configuration->{'REPEATMASKER_DIR'}->{'value'};
use SeedAlignment;
use SeedAlignmentCollection;
use SearchResult;
use SearchResultCollection;
use NCBIBlastSearchEngine;
use SeqDBI;
use FastaDB;

# Constants
use constant {
    FAMILY_SIZE_CUTOFF => 15,
    THREADS_PER_REFINER => 4,
    DEFAULT_MIN_SCORE => 250,
    DEFAULT_GAP_INIT => -25,
    DEFAULT_GAP_EXT => -5,
    DEFAULT_MIN_MATCH => 7,
    MAX_ELEMENTS => 100,
};

# Validate arguments
die "Usage: $0 roundTmpDir consensiFile sampleFastaFile combFamiliesFile threads rmblastn_path work_dir\n"
    unless @ARGV == 7;

my ($roundTmpDir, $consensiFile, $sampleFastaFile, $combFamiliesFile, 
    $total_threads, $RMBLASTN_PRGM, $work_dir) = @ARGV;
our %families; 

# Calculate max parallel Refiners
my $max_parallel_refiners = int($total_threads / THREADS_PER_REFINER);
$max_parallel_refiners = 1 if $max_parallel_refiners < 1;

print "Total available threads: $total_threads\n";
print "Threads per Refiner: " . THREADS_PER_REFINER . "\n";
print "Maximum parallel Refiners: $max_parallel_refiners\n";

# Global settings
my $NCBIBLASTDB_PRGM = "makeblastdb";
my $pm = Parallel::ForkManager->new($max_parallel_refiners);

# Setup working directory
chdir $work_dir or die "Cannot change to directory $work_dir: $!\n";
chdir "RepeatScout" or die "Cannot change to RepeatScout directory: $!\n";

# Process sample database
my ($sampleContigs, $actualGenomeSampleSize) = process_sample_database($sampleFastaFile);

$sampleFastaFile = abs_path($sampleFastaFile);
my $roundConsensiFile = abs_path("$roundTmpDir/consensi.fa");

if (-s "raw_lib.fa") {
    process_raw_library($roundConsensiFile, $sampleFastaFile, $roundTmpDir);
    buildRSConsensiParallel(
        workDir => $roundTmpDir,
        consensiFile => $consensiFile,
        combFamiliesFile => $combFamiliesFile,
        familyCutoff => FAMILY_SIZE_CUTOFF,
        threads_per_refiner => THREADS_PER_REFINER,
        max_parallel => $max_parallel_refiners,
        numContigs => scalar(keys %$sampleContigs),
    );
}

sub process_sample_database {
    my ($sample_file) = @_;
    my %sample_contigs;
    my $genome_size = 0;
    
    my $sample_db = FastaDB->new(
        fileName => $sample_file,
        openMode => SeqDBI::ReadOnly
    );
    
    foreach my $seq_id ($sample_db->getIDs()) {
        my $tmp_name = $sample_db->getDescription($seq_id);
        $tmp_name = $1 if $tmp_name =~ /(\S+):\d+-\d+/;
        $sample_contigs{$tmp_name}++;
        $genome_size += $sample_db->getSeqLength($seq_id);
    }
    
    undef $sample_db;
    return (\%sample_contigs, $genome_size);
}

sub process_raw_library {
    my ($round_consensi, $sample_fasta, $tmp_dir) = @_;
    
    system("cp raw_lib.fa $round_consensi") == 0
        or die "Failed to move raw_lib.fa: $!\n";
    run_makeblastdb($sample_fasta, $tmp_dir);
    run_makeblastdb($round_consensi, $tmp_dir);
}

sub run_makeblastdb {
    my ($input_file, $output_dir) = @_;
    my $cmd = "$NCBIBLASTDB_PRGM -out $input_file " .
              "-parse_seqids -dbtype nucl -in $input_file >> " .
              "$output_dir/makeblastdb.log";
    system($cmd) == 0 or die "Failed to run makeblastdb: $!\n";
}

sub setup_blast_engine {
    my ($rm_path, $work_dir, $thread_count) = @_;
    
    my $engine = NCBIBlastSearchEngine->new(pathToEngine => $rm_path)
        or die "Cannot execute $rm_path\n";
        
    $engine->setMatrix("$FindBin::RealBin/Matrices/ncbi/nt/comparison.matrix");
    $engine->setTempDir($work_dir);
    $engine->setMinScore(DEFAULT_MIN_SCORE);
    $engine->setGenerateAlignments(1);
    $engine->setGapInit(DEFAULT_GAP_INIT);
    $engine->setInsGapExt(DEFAULT_GAP_EXT);
    $engine->setDelGapExt(DEFAULT_GAP_EXT);
    $engine->setMinMatch(DEFAULT_MIN_MATCH);
    $engine->setCores($thread_count);
    $engine->setScoreMode(SearchEngineI::complexityAdjustedScoreMode);
    
    return $engine;
}

sub process_single_family {
    my ($family_id, $work_dir) = @_;
    
    my $family_file = "$work_dir/family-$family_id.fa";
    print "Processing family $family_id using file $family_file\n";

    # Run Refiner directly on family file
    my $cmd = "$FindBin::RealBin/Refiner.py"
            . " $family_file"
            . " $family_file.refiner_cons"
            . " -t " . THREADS_PER_REFINER
            . " --min-score 150"
            . " --gap-init 20"
            . " --gap-ext 5";
              
    print "Starting Refiner for family $family_id using " . THREADS_PER_REFINER . " threads\n";
    system($cmd) == 0 or die "Refiner failed for family $family_id\n";
}

sub process_families_parallel {
    my ($families, $work_dir, $max_parallel) = @_;

    my %process_status;
    my $pm = Parallel::ForkManager->new($max_parallel);
    
    $pm->run_on_finish(sub {
        my ($pid, $exit_code, $id) = @_;
        $process_status{$id} = $exit_code == 0;
        if ($exit_code == 0) {
            print "Family $id completed successfully\n";
        } else {
            print "WARNING: Family $id failed with exit code $exit_code\n";
        }
    });

    foreach my $family_id (@$families) {
        my $pid = $pm->start($family_id);
        next if $pid;
        
        eval {
            process_single_family($family_id, $work_dir);
            $pm->finish(0);
        };
        if ($@) {
            warn "Error processing family $family_id: $@\n";
            $pm->finish(1);
        }
    }

    $pm->wait_all_children;

    my $all_completed = 1;
    foreach my $family_id (@$families) {
        unless ($process_status{$family_id}) {
            warn "Family $family_id did not complete successfully\n";
            $all_completed = 0;
        }
    }

    return $all_completed;
}

sub buildRSConsensiParallel {
    my %params = @_;
    
    # First run satellite filtering
    filter_satellites($params{workDir}, $total_threads);
    
    print "Collecting repeat instances...\n";
    
    my $engine = setup_blast_engine(
        $RMBLASTN_PRGM, 
        $params{workDir},
        $total_threads
    );

    # Run BLAST search
    $engine->setMaskLevel(80);
    $engine->setQuery($sampleFastaFile);
    $engine->setSubject($roundConsensiFile);
    run_makeblastdb($roundConsensiFile, $params{workDir});
    my ($status, $resultCollection) = $engine->search();
    die "BLAST search failed\n" if $status;

    # Process results to populate %families hash
    for (my $k = 0; $k < $resultCollection->size(); $k++) {
        my $resultRef = $resultCollection->get($k);
        my $orient = $resultRef->getOrientation();
        my $sampleID = $resultRef->getQueryName();
        my $seqID = "gi|" . ($k + 1) . " ";
        
        if ($orient eq "C" || $orient eq "-") {
            $seqID .= $sampleID . ":" . 
                     ($resultRef->getQueryEnd() + 0) . "-" .
                     ($resultRef->getQueryStart() + 0);
        } else {
            $seqID .= $sampleID . ":" . 
                     ($resultRef->getQueryStart() + 0) . "-" .
                     ($resultRef->getQueryEnd() + 0);
        }
        
        my $sequence = $resultRef->getQueryString();
        $sequence =~ s/-//g;
        
        push @{$families{$resultRef->getSubjName()}->{elements}}, {
            seqID => $seqID,
            seq   => $sequence,
            score => $resultRef->getScore() || 0
        };
    }
    
    # Sort families by size
    my @sortedKeys = sort {
        my $size_a = defined $families{$a}->{elements} ? scalar(@{$families{$a}->{elements}}) : 0;
        my $size_b = defined $families{$b}->{elements} ? scalar(@{$families{$b}->{elements}}) : 0;
        $size_b <=> $size_a;
    } keys %families;

    print "Found " . scalar(@sortedKeys) . " families\n";

    # Process refinable families
    my %refinableFamilies;
    my $familyID = 0;
    my @family_ids;
    
    foreach my $key (@sortedKeys) {
        next unless defined $families{$key}->{elements} 
                   && @{$families{$key}->{elements}} >= $params{familyCutoff};
        
        $families{$key}->{roundfam} = $familyID;
        
        # Write family file
        my $family_file = "$params{workDir}/family-$familyID.fa";
        open my $fam_fh, ">", $family_file
            or die "Cannot open $family_file: $!\n";
            
        my $numElements = 0;
        foreach my $ele (
            sort {
                ($b->{score} || 0) <=> ($a->{score} || 0)
            } @{$families{$key}->{elements}}
        ) {
            last if $numElements >= MAX_ELEMENTS;
            print $fam_fh ">$ele->{seqID}\n$ele->{seq}\n";
            $numElements++;
        }
        close $fam_fh;
        
        $families{$key}->{numOfEles} = $numElements;
        $refinableFamilies{$key}++;
        push @family_ids, $familyID;
        $familyID++;
    }

    # Process families in parallel
    my $success = process_families_parallel(
        \@family_ids,
        $params{workDir},
        $params{max_parallel}
    );

    die "Family processing failed\n" unless $success;

    # Process results and write final files
    collect_final_results($params{workDir});
}

sub collect_final_results {
    my ($work_dir) = @_;
    my $parent_dir = dirname($work_dir);
    
    # Debug info
    print "Work directory: $work_dir\n";
    print "Parent directory: $parent_dir\n";
    
    # Collect all refiner_cons files into consensi.fa
    my @cons_files = glob("$work_dir/family-*.fa.refiner_cons");
    
    if (@cons_files) {
        open my $cons_out, '>', "$parent_dir/consensi.fa" 
            or die "Cannot open $parent_dir/consensi.fa: $!\n";
        
        foreach my $cons_file (@cons_files) {
            if (-s $cons_file) {
                open my $in, '<', $cons_file 
                    or die "Cannot open $cons_file: $!\n";
                my $content = do { local $/; <$in> };
                print $cons_out $content;
                close $in;
            } else {
                warn "Warning: $cons_file is empty or doesn't exist\n";
            }
        }
        close $cons_out;
    } else {
        warn "No refiner_cons files found in $work_dir\n";
    }
    
    # Verify output files
    my $cons_size = -s "$parent_dir/consensi.fa";
    print "\nFinal results:\n";
    print "- consensi.fa size: " . ($cons_size || 0) . " bytes\n";
}

sub filter_satellites {
    my ($work_dir, $thread_count) = @_;
    
    my $searchEngineN = NCBIBlastSearchEngine->new(pathToEngine => $RMBLASTN_PRGM);
    die "Cannot execute $RMBLASTN_PRGM\n" unless defined $searchEngineN;
    
    $searchEngineN->setMatrix("$FindBin::RealBin/Matrices/ncbi/nt/comparison.matrix");
    $searchEngineN->setTempDir($work_dir);
    $searchEngineN->setMinScore(250);
    $searchEngineN->setGenerateAlignments(1);
    $searchEngineN->setGapInit(-25);
    $searchEngineN->setInsGapExt(-5);
    $searchEngineN->setDelGapExt(-5);
    $searchEngineN->setMinMatch(7);
    $searchEngineN->setCores($thread_count);
    $searchEngineN->setScoreMode(SearchEngineI::complexityAdjustedScoreMode);

    # Run makeblastdb
    system("$NCBIBLASTDB_PRGM -out $work_dir/consensi.fa " .
           "-parse_seqids -dbtype nucl -in $work_dir/consensi.fa >> " .
           "$work_dir/makeblastdb.log 2>&1");
    
    # Set query and subject
    $searchEngineN->setSubject("$work_dir/consensi.fa");
    $searchEngineN->setQuery("$work_dir/consensi.fa");
    
    # Run search
    my %satelliteSeqIDs;
    my ($status, $resultCollection) = $searchEngineN->search();
    if ($status) {
        print STDERR "\nERROR from search engine (", $? >> 8, ") \n";
        return;
    }
    
    print "   - Large Satellite Filtering.. ";
    my %coverage;
    for (my $k = 0; $k < $resultCollection->size(); $k++) {
        my $resultRef = $resultCollection->get($k);
        next if ($resultRef->getQueryName() ne $resultRef->getSubjName() ||
                ($resultRef->getQueryStart() == 1 && 
                 $resultRef->getQueryRemaining() == 0 &&
                 $resultRef->getSubjStart() == 1 && 
                 $resultRef->getSubjRemaining() == 0));
                 
        my $ID = $resultRef->getQueryName();
        my $familyLen = $resultRef->getQueryEnd() + $resultRef->getQueryRemaining();
        next if ($familyLen < 3000);
        
        $coverage{$ID} += $resultRef->getQueryEnd() - $resultRef->getQueryStart() + 1;
        if ($coverage{$ID} > 0.9 * $familyLen) {
            $satelliteSeqIDs{$ID} = 1;
        }
    }
    
    if (keys %satelliteSeqIDs) {
        my $consDB = FastaDB->new(
            fileName => "$work_dir/consensi.fa",
            openMode => SeqDBI::ReadOnly
        );
        
        open my $outc_fh, ">$work_dir/consensi-filtered.fa" 
            or die "Could not open consensi-filtered.fa: $!\n";

        foreach my $seqID ($consDB->getIDs()) {
            unless (exists $satelliteSeqIDs{$seqID}) {
                my $seq = $consDB->getSequence($seqID);
                my $desc = $consDB->getDescription($seqID);
                print $outc_fh ">$seqID $desc\n";
                $seq =~ s/(.{50})/$1\n/g;
                print $outc_fh "$seq\n";
            }
        }
        close $outc_fh;
        undef $consDB;

        system("mv $work_dir/consensi-filtered.fa $work_dir/consensi.fa");
    }
    
    # Cleanup blast databases
    foreach my $suffix (qw(nhr nin nnd nni nog nsq)) {
        unlink("$work_dir/consensi.fa.$suffix") if -e "$work_dir/consensi.fa.$suffix";
    }
    
    undef $resultCollection;
    undef $searchEngineN;
}

1;
