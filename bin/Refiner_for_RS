#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use File::Path qw(make_path);
use File::Basename qw(dirname basename);
use Parallel::ForkManager;
use Log::Log4perl qw(:easy);

# Import essential RepeatMasker modules
use RepModelConfig;
use lib $RepModelConfig::configuration->{'REPEATMASKER_DIR'}->{'value'};
use SearchResult;
use SearchResultCollection;
use NCBIBlastSearchEngine;
use FastaDB;

Log::Log4perl->easy_init({
    level   => $INFO,
    layout  => '[%d] %p %m%n',
    file    => 'refiner_rs.log'
});
my $logger = Log::Log4perl->get_logger();

# Constants
use constant {
    FAMILY_SIZE_CUTOFF => 15,
    THREADS_PER_REFINER => 4,
    DEFAULT_MIN_SCORE => 250,
    DEFAULT_GAP_INIT => -25,
    DEFAULT_GAP_EXT => -5,
    DEFAULT_MIN_MATCH => 7,
    MAX_ELEMENTS => 100,
    READ_MODE => 'r',    # Replace SeqDBI::ReadOnly
};

our $VERSION = '1.0.0';

# Configuration
my %config;
my %families;

sub validate_inputs {
    my ($config) = @_;
    
    if(defined $config->{sample_file} && !-f $config->{sample_file}) {
        $logger->error("Sample file not found: $config->{sample_file}");
        return 0;
    }
    
    for my $dir ($config->{work_dir}, $config->{output_dir}) {
        if(!-d $dir) {
            eval { make_path($dir) };
            if($@) {
                $logger->error("Failed to create directory $dir: $@");
                return 0;
            }
        }
        if(!-w $dir) {
            $logger->error("Directory not writable: $dir");
            return 0;
        }
    }
    
    if($config->{threads} !~ /^\d+$/ || $config->{threads} < 1) {
        $logger->error("Invalid thread count: $config->{threads}");
        return 0;
    }
    
    return 1;
}

$logger->info("Starting Refiner_for_RS");
$logger->info("Command line arguments: " . join(" ", @ARGV));

# Usage check
die usage() unless @ARGV == 7;

# Parse command line arguments
($config{work_dir}, $config{consensi_file}, $config{sample_file}, 
 $config{families_file}, $config{threads}, $config{rmblast_path},
 $config{output_dir}) = @ARGV;

 unless(validate_inputs(\%config)) {
    die "Input validation failed. Check refiner_rs.log for details.\n";
}

die "Invalid thread count\n" unless $config{threads} > 0;

# Setup directories
make_path($config{work_dir}) unless -d $config{work_dir};
chdir $config{work_dir} or die "Cannot change to working directory: $!\n";

# Calculate parallel processing settings
$config{max_parallel} = int($config{threads} / THREADS_PER_REFINER);
$config{max_parallel} = 1 if $config{max_parallel} < 1;

# Main execution
my $sample_contigs = process_sample_database();
if (-s "repeats.filtered.fa") {
    process_raw_library();
    build_consensus_parallel();
}

exit(0);

###############################################################################
# Core Functions
###############################################################################

sub process_sample_database {
    my %sample_contigs;
    my $genome_size = 0;
    
    my $sample_db = FastaDB->new(
        fileName => $config{sample_file},
        openMode => READ_MODE
    ) or die "Could not open $config{sample_file}: $!\n";
    
    print "Processing sample database...\n";
    foreach my $seq_id ($sample_db->getIDs()) {
        $sample_contigs{$seq_id}++;
        $genome_size += $sample_db->getSeqLength($seq_id);
    }
    
    print "Processed ", scalar(keys %sample_contigs), " contigs ($genome_size bp)\n";
    return \%sample_contigs;
}

sub process_raw_library {
    print "Processing raw library...\n";
    
    run_cmd("cp repeats.filtered.fa $config{consensi_file}");
    create_blast_db($config{sample_file});
    create_blast_db($config{consensi_file});
}

sub create_blast_db {
    my ($input_file) = @_;
    run_cmd("makeblastdb -out $input_file -parse_seqids -dbtype nucl -in $input_file");
}

sub build_consensus_parallel {
    print "Building consensus sequences...\n";
    
    my $engine = setup_blast_engine();
    my $results = run_blast_search($engine);
    process_blast_results($results);
    
    my $pm = Parallel::ForkManager->new($config{max_parallel});
    process_families($pm);
    collect_results();
}

sub setup_blast_engine {
    my $engine = NCBIBlastSearchEngine->new(
        pathToEngine => "$config{rmblast_path}/rmblastn"
    ) or die "Cannot initialize BLAST engine\n";
    
    $engine->setMatrix("$FindBin::RealBin/Matrices/ncbi/nt/comparison.matrix");
    $engine->setTempDir($config{work_dir});
    $engine->setMinScore(DEFAULT_MIN_SCORE);
    $engine->setGenerateAlignments(1);
    $engine->setGapInit(DEFAULT_GAP_INIT);
    $engine->setInsGapExt(DEFAULT_GAP_EXT);
    $engine->setDelGapExt(DEFAULT_GAP_EXT);
    $engine->setMinMatch(DEFAULT_MIN_MATCH);
    $engine->setCores($config{threads});
    $engine->setScoreMode(SearchEngineI::complexityAdjustedScoreMode);
    
    return $engine;
}

sub run_blast_search {
    my ($engine) = @_;
    
    $engine->setQuery($config{sample_file});
    $engine->setSubject($config{consensi_file});
    
    my ($status, $results) = $engine->search();
    die "BLAST search failed\n" if $status;
    
    return $results;
}

sub process_blast_results {
    my ($results) = @_;
    
    for (my $i = 0; $i < $results->size(); $i++) {
        my $result = $results->get($i);
        store_result($result, $i);
    }
}

sub store_result {
    my ($result, $index) = @_;
    
    my $orient = $result->getOrientation();
    my $seq_id = sprintf("gi|%d", $index + 1);
    my $coords = get_coords_string($result, $orient);
    my $seq = $result->getQueryString();
    $seq =~ s/-//g;
    
    push @{$families{$result->getSubjName()}->{elements}}, {
        seqID => "$seq_id $coords",
        seq   => $seq,
        score => $result->getScore() || 0
    };
}

sub get_coords_string {
    my ($result, $orient) = @_;
    
    my ($start, $end) = ($orient eq "C" || $orient eq "-") 
        ? ($result->getQueryEnd(), $result->getQueryStart())
        : ($result->getQueryStart(), $result->getQueryEnd());
        
    return sprintf("%s:%d-%d", $result->getQueryName(), $start, $end);
}

sub process_families {
    my ($pm) = @_;
    
    my @sorted = sort {
        @{$families{$b}->{elements}} <=> @{$families{$a}->{elements}}
    } keys %families;
    
    foreach my $family (@sorted) {
        next unless @{$families{$family}->{elements}} >= FAMILY_SIZE_CUTOFF;
        
        $pm->start and next;
        process_family($family);
        $pm->finish;
    }
    
    $pm->wait_all_children;
}

sub process_family {
    my ($family) = @_;
    
    # Write family sequences
    my $file = "family-$family.fa";
    open my $fh, '>', $file or die "Cannot open $file: $!\n";
    
    my $count = 0;
    for my $elem (sort { ($b->{score}||0) <=> ($a->{score}||0) } 
                 @{$families{$family}->{elements}}) {
        last if $count >= MAX_ELEMENTS;
        print $fh ">$elem->{seqID}\n$elem->{seq}\n";
        $count++;
    }
    close $fh;
    
    # Run Refiner
    run_cmd(join(" ",
        "$FindBin::RealBin/Refiner.py",
        $file,
        "$file.refiner_cons",
        "-t", THREADS_PER_REFINER,
        "--min-score", "150",
        "--gap-init", "20",
        "--gap-ext", "5",
        "2> refine.log"
    ));
}

sub collect_results {
    my $outfile = "$config{output_dir}/consensi.fa";
    open my $out, '>', $outfile or die "Cannot open $outfile: $!\n";
    
    for my $cons_file (glob("family-*.fa.refiner_cons")) {
        if (-s $cons_file) {
            open my $in, '<', $cons_file or die "Cannot open $cons_file: $!\n";
            print $out $_ while <$in>;
            close $in;
        }
    }
    close $out;
}

sub run_cmd {
    my $cmd = shift;
    system($cmd) == 0 or die "Command failed: $cmd\n";
}

sub usage {
    return "Usage: $0 workDir consensiFile sampleFile familiesFile threads rmblast_path output_dir\n";
}
