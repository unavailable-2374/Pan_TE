#!/usr/bin/env perl
use strict;
use warnings;
use File::Path qw(make_path remove_tree);
use File::Spec;
use File::Basename qw(dirname basename);
use Cwd qw(getcwd);
use constant {
    MIN_THREADS => 1,
    DEFAULT_EVALUE => '1e-5',
    BLAST_DB_TYPE => 'nucl',
    MIN_PREDETECT_SIZE => 10000000,  # 10Mb
    MAX_PREDETECT_SIZE => 40000000,  # 40Mb
    TE_THRESHOLD => 30,              # 30% TE content threshold
    MAX_REDUCED_SAMPLE => 256000000  # 256Mb cap for reduced sampling
};

die "Usage: $0 round_num threads genome_file genome_size batch_size\n"
    unless @ARGV == 5;

my ($round_num, $threads, $genome_file, $genome_size, $batch_size) = @ARGV;

die "Round number must be positive\n" unless $round_num > 0;
die "Threads must be at least " . MIN_THREADS . "\n" unless $threads >= MIN_THREADS;
die "Genome file $genome_file not found\n" unless -f $genome_file;
die "Invalid genome size\n" unless $genome_size =~ /^\d+$/;
die "Invalid batch size\n" unless $batch_size =~ /^\d+$/;

# Create directory structure
my $tmp_dir = "round-$round_num";
make_path($tmp_dir) unless -d $tmp_dir;
chdir $tmp_dir or die "Cannot change to directory $tmp_dir: $!\n";

my $times = int($genome_size / $batch_size);
my $cpu_threads = int($threads/4);
$cpu_threads = MIN_THREADS if $cpu_threads < MIN_THREADS;

# Run the pre-detection step and get TE percentage
my $te_percentage = run_predetection($genome_file, $cpu_threads);
print "Pre-detection TE percentage: $te_percentage%\n";

# Adjust sampling based on pre-detection results
my $adjusted_times = $times;
if ($te_percentage < TE_THRESHOLD) {
    # Calculate new times based on reduced sample size (max 256Mb)
    my $reduced_sample_size = MAX_REDUCED_SAMPLE;
    # If original sample is smaller than the cap, keep it
    if ($genome_size < MAX_REDUCED_SAMPLE) {
        $reduced_sample_size = $genome_size;
    }
    $adjusted_times = int($reduced_sample_size / $batch_size);
    print "Low TE content detected ($te_percentage%). Reducing sample size to " . 
          ($adjusted_times * $batch_size) . " bytes\n";
} else {
    print "Sufficient TE content detected ($te_percentage%). Using original sample size\n";
}

# Continue with regular processing using adjusted sample size
process_repeat_masker($genome_file, $cpu_threads, $adjusted_times, $batch_size, $te_percentage);
process_blast_db($threads, $genome_file);
run_recon_pipeline();
build_final_output($threads);

my $ok_file = "../round-${round_num}.ok";
open(my $fh_ok, '>', $ok_file) or die "Cannot create $ok_file: $!\n";
close $fh_ok;

chdir "../";

exit 0;

# New function for pre-detection step
sub run_predetection {
    my ($genome_file, $cpu_threads) = @_;
    
    print "Starting pre-detection for TE content...\n";
    
    # Create predetect directory
    make_path("predetect") unless -d "predetect";
    
    # Calculate 1% of genome size
    my $total_size = `wc -c < $genome_file`;
    chomp($total_size);
    my $sample_size = int($total_size * 0.01);
    
    # Apply min/max constraints
    if ($sample_size < MIN_PREDETECT_SIZE) {
        $sample_size = MIN_PREDETECT_SIZE;
    } elsif ($sample_size > MAX_PREDETECT_SIZE) {
        $sample_size = MAX_PREDETECT_SIZE;
    }
    
    print "Pre-detection sample size: $sample_size bytes\n";
    
    # Calculate number of regions to sample evenly
    my $region_size = 10000; # 10kb regions
    my $num_regions = int($sample_size / $region_size);
    
    # Create evenly distributed bed file for sampling
    run_cmd("sample_for_genome $genome_file.fai predetect/sample.bed $num_regions $region_size");
    
    # Extract sequences
    run_cmd("seqtk subseq $genome_file predetect/sample.bed > predetect/sample.fa");
    
    # Run RepeatMasker with -div 20
    run_cmd("RepeatMasker -lib ../raw.fa -e rmblast -lcambig -dir predetect " . 
            "-pa $cpu_threads -q predetect/sample.fa -div 20 > predetect/rm.log 2>&1");
    
    # Parse RepeatMasker output to get TE percentage
    my $te_percentage = 0;
    if (-e "predetect/sample.fa.tbl") {
        # Extract total masked bases from tbl file
        my $tbl_output = `grep "bases masked" predetect/sample.fa.tbl`;
        print "RepeatMasker output: $tbl_output\n";
        # Match the actual format: "bases masked: XXXX bp ( XX.XX %)"
        if ($tbl_output =~ /\(\s*([0-9.]+)\s*%\s*\)/) {
            $te_percentage = $1;
            print "Successfully extracted TE percentage: $te_percentage%\n";
        } else {
            print "Warning: Could not parse TE percentage from: $tbl_output\n";
        }
    } else {
        print "Warning: RepeatMasker tbl file not found. Using default TE percentage.\n";
    }
    
    return $te_percentage;
}

sub process_repeat_masker {
    my ($genome_file, $cpu_threads, $times, $batch_size, $te_percentage) = @_;
    
    return if -e "repeat/tmp.fa.tbl";
    
    run_cmd("sample_for_genome $genome_file.fai out.bed $times $batch_size");
    run_cmd("seqtk subseq $genome_file out.bed > tmp.fa");
    run_cmd("renameTE TE ../raw.fa ../re.fa");
    
    system("Refiner_for_LTR ../re.fa ./ --threads $threads > refine.log 2> refine.err") == 0 
        or die "Failed to Combine LTR & RepeatScout\n";
    
    `mv consensi.fa lib.fa`;
    
    # Use -div 10 for the main RepeatMasker run (keeping original parameter)
    run_cmd("RepeatMasker -lib lib.fa -e rmblast -lcambig -dir repeat " . 
            "-pa $cpu_threads -q tmp.fa -div 15 > rm.log 2>&1");
}

sub process_blast_db {
    my ($threads,$genome_file) = @_;
    return if -e "msp.out";
    
    my %id_mapping = load_translation_table($genome_file);
    
    process_masked_file(\%id_mapping);
    
    run_cmd("makeblastdb -in DB.fa -dbtype " . BLAST_DB_TYPE . 
            " -parse_seqids -out DB");
    run_cmd("blastn -query DB.fa -out recon.tbl -db DB -outfmt 6 " .
            "-evalue " . DEFAULT_EVALUE . " -num_threads $threads");
    run_cmd("Tbl2Msp recon.tbl > msp.out");
    
    create_seq_name_list();
}

sub run_recon_pipeline {
    for my $dir ('images', 'summary') {
        make_path($dir) unless -d $dir;
    }
    
    run_cmd("imagespread seq_name.list msp.out > imagespread.log 2> imagespread.log");
    move_gmon("imagespread");
    
    run_cmd("sort -k 3,3 -k 4n,4n -k 5nr,5nr images/spread1 > images/images_sorted");
    unlink glob "images/spread*";
    
    process_element_definition();
    
    process_element_redefinition();
    
    process_edge_redefinition();
    
    run_cmd("famdef seq_name.list > famdef.log 2> famdef.log");
    move_gmon("famdef");
}

sub process_element_definition {
    remove_tree('ele_def_res');
    make_path('ele_def_res');
    
    run_cmd("eledef seq_name.list msp.out single > eledef.log 2> eledef.log");
    move_gmon("eledef");
}

sub process_element_redefinition {
    remove_tree('ele_redef_res');
    make_path('ele_redef_res');
    
    create_symlinks('ele_def_res', 'ele_redef_res');
    run_cmd("eleredef seq_name.list > eleredef.log  2> eleredef.log");
    move_gmon("eleredef");
    remove_symlinks();
}

sub process_edge_redefinition {
    remove_tree('edge_redef_res');
    make_path('edge_redef_res');
    
    create_symlinks('ele_redef_res', 'edge_redef_res');
    run_cmd("edgeredef seq_name.list > edgeredef.log 2> edgeredef.log");
    move_gmon("edgeredef");
    remove_symlinks();
    
    create_symlinks('edge_redef_res', undef);
}

sub load_translation_table {
    my ($genome_file) = @_;
    my %id_mapping;
    
    # Update the path to look in the genome directory for the translation file
    my $translation_file = dirname($genome_file) . "/genome.fa.translation";
    
    open(my $fh_trans, '<', $translation_file) 
        or die "Cannot open translation file: $translation_file: $!\n";
        
    while(<$fh_trans>) {
        chomp;
        my ($key, $value) = split(/\t/);
        $id_mapping{$key} = $value;
    }
    close $fh_trans;
    return %id_mapping;
}

sub process_masked_file {
    my ($id_mapping_ref) = @_;
    
    open(my $fh_in, '<', "repeat/tmp.fa.masked") 
        or die "Cannot open tmp.fa.masked: $!\n";
    open(my $fh_out, '>', "DB.fa") 
        or die "Cannot open DB.fa: $!\n";
    
    my $counter = 1;
    while (my $line = <$fh_in>) {
        chomp $line;
        if($line =~ /^>/) {
            $line =~ s/^>//;
            my @arr = split(/:/, $line);
            print $fh_out ">gi|${counter} gi|" . 
                  $id_mapping_ref->{$arr[0]} . ":" . 
                 $arr[1] . "\n";
            $counter++;
        } else {
            print $fh_out "$line\n";
        }
    }
    close $fh_in;
    close $fh_out;
}

sub create_seq_name_list {
    run_cmd("grep '>' DB.fa | wc -l > seq_name.list");
    open(my $in, '<', 'DB.fa') or die "Can't open DB.fa: $!";
    open(my $out, '>>', 'seq_name.list') or die "Can't open seq_name.list: $!";

    my @headers;
    while (<$in>) {
        if (/^>(.*)/) {
            push @headers, (split /\s+/, $1)[0];
        }
    }
    print $out "$_\n" for sort @headers;

    close $in;
    close $out;
}

sub create_symlinks {
    my ($src, $dst) = @_;
    remove_tree("tmp");
    remove_tree("tmp2");
    symlink($src, 'tmp') or die "Cannot create symlink tmp: $!\n";
    symlink($dst, 'tmp2') or die "Cannot create symlink tmp2: $!\n" if $dst;
}

sub remove_symlinks {
    remove_tree("tmp");
    remove_tree("tmp2");
}

sub move_gmon {
    my $prefix = shift;
    if (-f "gmon.out") {
        rename("gmon.out", "${prefix}-gmon.out") 
            or die "Cannot rename gmon.out: $!\n";
    }
}

sub build_final_output {
    my ($threads) = @_;
    run_cmd("build_for_RECON ./ ../../genome/genome.fa $threads");
}

sub run_cmd {
    my $cmd = shift;
    $cmd =~ s/[`;\$]/\\$&/g;
    system($cmd) == 0 or die "Failed to execute: $cmd\n";
}
