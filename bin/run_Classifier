#!/usr/bin/env bash

# Enable error handling
set -e
set -o pipefail

# Configuration
LOG_FILE="classifier.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Logging function
log() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
}

error() {
    echo "[$TIMESTAMP] ERROR: $1" | tee -a "$LOG_FILE" >&2
    exit 1
}

# Check arguments
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    error "Usage: $0 <ClassifyTE_dir> [threads]"
fi

CLASSIFYTE_DIR="$1"
THREADS="${2:-$(nproc)}"

# Verify directory exists
if [ ! -d "$CLASSIFYTE_DIR" ]; then
    error "ClassifyTE directory not found: $CLASSIFYTE_DIR"
fi

log "Starting TE classification process"
log "ClassifyTE directory: $CLASSIFYTE_DIR"
log "Using $THREADS threads for classification"

# Create data directory
log "Setting up environment"
mkdir -p data || error "Failed to create data directory"

# Rename TEs
log "Renaming TE sequences"
if ! renameTE TE raw_TEs.fa data/re.fa; then
    error "Failed to rename TE sequences"
fi

# Create symbolic links
log "Creating required symbolic links"
for dir in features nodes models; do
    if [ -e "$CLASSIFYTE_DIR/$dir" ]; then
        ln -sf "$CLASSIFYTE_DIR/$dir" ./ || error "Failed to link $dir directory"
    else
        error "Required directory not found: $CLASSIFYTE_DIR/$dir"
    fi
done

# Set number of threads for RepeatClassifier
if [ $THREADS -gt 1 ]; then
    RC_THREADS=$((THREADS - 1))
else
    RC_THREADS=1
fi

# Create temporary files to track completion
RC_DONE="/tmp/rc_done.$$"
CT_DONE="/tmp/ct_done.$$"

# Run RepeatClassifier in background
log "Starting RepeatClassifier with $RC_THREADS threads"
(
    RepeatClassifier -consensi data/re.fa --threads $RC_THREADS
    touch "$RC_DONE"
) &
RC_PID=$!

# Run parallel feature generation and evaluation
log "Starting feature generation and evaluation"
(
    # Generate feature file
    if ! conda run -n ClassifyTE_env python "$CLASSIFYTE_DIR/generate_feature_file_parallel.py" -j $RC_THREADS -f re.fa -d sup_features -o sup.csv; then
        error "Failed to generate feature file"
    fi

    # Evaluate features
    if ! conda run -n ClassifyTE_env python "$CLASSIFYTE_DIR/evaluate.py" -f sup.csv -n node.txt -d sup_features -m ClassifyTE_combined.pkl -a lcpnb; then
        error "Feature evaluation failed"
    fi
    touch "$CT_DONE"
) &
CT_PID=$!

# Wait for both processes to complete
log "Waiting for classification processes to complete..."

wait_with_timeout() {
    local pid=$1
    local timeout=7200  # 2 hours timeout
    local count=0
    while kill -0 $pid 2>/dev/null; do
        sleep 10
        count=$((count + 10))
        if [ $count -ge $timeout ]; then
            kill $pid 2>/dev/null || true
            error "Process $pid timed out after $timeout seconds"
        fi
    done
}

wait_with_timeout $RC_PID
wait_with_timeout $CT_PID

# Check if both processes completed successfully
if [ ! -f "$RC_DONE" ] || [ ! -f "$CT_DONE" ]; then
    error "One or more classification processes failed"
fi

# Clean up temporary files
rm -f "$RC_DONE" "$CT_DONE"

# Process and combine results
log "Processing classification results"
if ! process_for_classify.py output/predicted_out_sup_features.csv result.txt; then
    error "Failed to process classification results"
fi

# Combine results
log "Combining results"
if ! Combine_for_Two; then
    error "Failed to combine results"
fi

# Post-process classifications
log "Post-processing classifications"
sed -i 's:#I:#LINE:' TEs.fa
sed -i 's:gypsy:LTR/Gypsy:' TEs.fa
sed -i 's:#Unknown#:#:' TEs.fa

log "Classification process completed successfully"
